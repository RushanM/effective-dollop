name: Альфа-выпуск

on:
  push:
    branches:
      - alpha
    paths:
      - 'Набор ресурсов/**'
      - 'Сборки/Monifactory/Перевод/**'
      - 'Сборки/The Ferret Business/Перевод/**'
      - 'Сборки/All of Fabric 6/Перевод/**'
      - 'Сборки/GT New Horizons/Перевод/**'
      - 'Сборки/Better MC 4/Перевод/**'
  pull_request:
    branches:
      - alpha
    paths:
      - 'Набор ресурсов/**'
      - 'Сборки/Monifactory/Перевод/**'
      - 'Сборки/The Ferret Business/Перевод/**'
      - 'Сборки/All of Fabric 6/Перевод/**'
      - 'Сборки/GT New Horizons/Перевод/**'
      - 'Сборки/Better MC 4/Перевод/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Клонирование репозитория
        uses: actions/checkout@v4

      - name: Установка утилиты ZIP
        run: sudo apt-get install -y zip

      - name: Проверка последнего выпуска
        id: get_latest_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const token = core.getInput("github-token");
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit({ auth: token });

            const response = await octokit.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const releases = response.data;

            let latestRelease = null;
            let latestAlphaRelease = null;
            let latestBetaRelease = null;

            const tagRegex = /^(\d+)\.(\d+)(?:\.(\d+))?(?:-C(\d+))?(?:-B(\d+))?(?:-A(\d+))?$/;

            for (const release of releases) {
              const tag = release.tag_name;
              const match = tagRegex.exec(tag);

              if (match) {
                const [_, major, minor, patch = '0', candidate = '0', beta = '0', alpha = '0'] = match;

                if (alpha !== '0') {
                  if (!latestAlphaRelease || new Date(release.created_at) > new Date(latestAlphaRelease.created_at)) {
                    latestAlphaRelease = { major, minor, patch, candidate, beta, alpha, release };
                  }
                } else if (beta !== '0') {
                  if (!latestBetaRelease || new Date(release.created_at) > new Date(latestBetaRelease.created_at)) {
                    latestBetaRelease = { major, minor, patch, candidate, beta, release };
                  }
                }
              }
            }

            let nextMajor = 1;
            let nextMinor = 0;
            let nextPatch = 0;
            let nextCandidate = 1;
            let nextBeta = 1;
            let nextAlpha = 1;

            if (latestAlphaRelease) {
              nextMajor = parseInt(latestAlphaRelease.major);
              nextMinor = parseInt(latestAlphaRelease.minor);
              nextPatch = parseInt(latestAlphaRelease.patch);
              nextCandidate = parseInt(latestAlphaRelease.candidate);
              nextBeta = parseInt(latestAlphaRelease.beta);
              nextAlpha = parseInt(latestAlphaRelease.alpha) + 1;
            } else if (latestBetaRelease) {
              nextMajor = parseInt(latestBetaRelease.major);
              nextMinor = parseInt(latestBetaRelease.minor);
              nextPatch = parseInt(latestBetaRelease.patch);
              nextCandidate = parseInt(latestBetaRelease.candidate);
              nextBeta = parseInt(latestBetaRelease.beta) + 1;
              nextAlpha = 1;
            }

            // Проверка, была ли выпущеа новая бета после последней альфы
            if (latestBetaRelease && latestAlphaRelease) {
              if (new Date(latestBetaRelease.release.created_at) > new Date(latestAlphaRelease.release.created_at)) {
                nextBeta = parseInt(latestBetaRelease.beta) + 1;
                nextAlpha = 1;
              }
            }

            core.setOutput('next_major', nextMajor);
            core.setOutput('next_minor', nextMinor);
            core.setOutput('next_patch', nextPatch);
            core.setOutput('next_candidate', nextCandidate);
            core.setOutput('next_beta', nextBeta);
            core.setOutput('next_alpha', nextAlpha);

            let tagName = `${nextMajor}.${nextMinor}`;
            if (nextPatch > 0) {
              tagName += `.${nextPatch}`;
            }
            tagName += `-C${nextCandidate}-B${nextBeta}-A${nextAlpha}`;

            core.setOutput('tag_name', tagName);

            const previousAlphaTag = latestAlphaRelease ? latestAlphaRelease.release.tag_name : '';
            core.setOutput('previous_alpha_tag', previousAlphaTag);

      - name: Генерация списка изменений
        id: generate_release_notes
        uses: actions/github-script@v7
        env:
          GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { google } = require('googleapis');
            const token = core.getInput('github-token');
            const { execSync } = require('child_process');

            const previousTag = '${{ steps.get_latest_release.outputs.previous_alpha_tag }}';
            let commitRange = '';
            if (previousTag) {
              commitRange = `${previousTag}..HEAD`;
            } else {
              commitRange = 'HEAD';
            }

            // Получение списка изменённых файлов
            let files = [];
            try {
              const output = execSync(`git diff --name-only ${commitRange}`).toString();
              files = output.trim().split('\n');
            } catch (error) {
              core.setFailed(`Failed to get changed files: ${error.message}`);
              return;
            }

            // Фильтрация файлов переводов
            const translationFiles = files.filter(file => file.includes('assets/') && file.includes('/lang/'));

            // Извлечение изменённых переводов модов и версий
            const modChanges = {};
            translationFiles.forEach(file => {
              const parts = file.split('/');
              const version = parts[1];
              const modIdIndex = parts.indexOf('assets') + 1;
              const modId = parts[modIdIndex];
              const langFile = parts.slice(modIdIndex + 1).join('/');

              if (!modChanges[modId]) {
                modChanges[modId] = new Set();
              }
              modChanges[modId].add(version);
            });

            // Подключение к БД
            const sheets = google.sheets('v4');

            const auth = new google.auth.GoogleAuth({
              credentials: JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_KEY),
              scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
            });

            const docId = '1kGGT2GGdG_Ed13gQfn01tDq2MZlVOC9AoiD1s3SDlZE';

            let modData = {};

            try {
              const response = await sheets.spreadsheets.values.get({
                auth,
                spreadsheetId: docId,
                range: 'db!A:I', // Лист «db»
              });

              const rows = response.data.values;
              if (rows.length) {
                // Заголовки: id, name, modrinthUrl, cfUrl, fallbackUrl
                const headers = rows[0];
                for (let i = 1; i < rows.length; i++) {
                  const row = rows[i];
                  const mod = {};
                  for (let j = 0; j < headers.length; j++) {
                    mod[headers[j]] = row[j];
                  }
                  modData[mod['id']] = mod;
                }
              } else {
                core.setFailed('В гугл-таблице нет данных');
                return;
              }
            } catch (error) {
              core.setFailed(`Ошибка доступа к гугл-таблице: ${error.message}`);
              return;
            }

            // Построение списка изменений

            // Заголовок
            const alphaNumber = parseInt('${{ steps.get_latest_release.outputs.next_alpha }}', 10);
            let releaseNotes = `Это ${alphaNumber}-я альфа-версия всех переводов проекта.\n\n`;
            releaseNotes += `Про то, как выходят ранние версии проекта, можете прочитать [здесь](https://github.com/RM/MMRT/blob/alpha/%D0%9F%D0%B0%D0%BC%D1%8F%D1%82%D0%BA%D0%B8/%D0%98%D0%BC%D0%B5%D0%BD%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B2%D1%8B%D0%BF%D1%83%D1%81%D0%BA%D0%BE%D0%B2.md).\n\n`;

            // Изменения
            const changes = {};

            translationFiles.forEach(file => {
              const parts = file.split('/');
              const version = parts[1];
              const modIdIndex = parts.indexOf('assets') + 1;
              const modId = parts[modIdIndex];
              const langFile = parts.slice(modIdIndex + 1).join('/');

              const mod = modData[modId];
              if (mod) {
                let modName = mod['name'];
                let modUrl = mod['modrinthUrl'];
                if (!modUrl || modUrl === 'FALSE') {
                  modUrl = mod['cfUrl'];
                }
                if (!modUrl || modUrl === 'FALSE') {
                  modUrl = mod['fallbackUrl'];
                }

                // Определение языка
                let lang = '';
                if (file.includes('ru_ru')) {
                  lang = 'русский';
                } else if (file.includes('tt_ru')) {
                  lang = 'татарский';
                } else {
                  lang = 'неизвестный язык';
                }

                const key = `${lang}-${modId}`;
                if (!changes[key]) {
                  changes[key] = {
                    lang: lang,
                    modName: modName,
                    modUrl: modUrl,
                    versions: new Set(),
                  };
                }
                changes[key].versions.add(version);
              }
            });

            if (Object.keys(changes).length === 0) {
              releaseNotes += 'В этой альфе нет изменений.';
            } else {
              const langs = new Set(Object.values(changes).map(change => change.lang));

              if (Object.keys(changes).length === 1) {
                const change = Object.values(changes)[0];
                releaseNotes += `**В этой альфе изменён ${change.lang} перевод [${change.modName}](${change.modUrl}) для Minecraft ${Array.from(change.versions).join(', ')}.**`;
              } else {
                releaseNotes += '**Изменения**\n\n';
                for (const changeKey in changes) {
                  const change = changes[changeKey];
                  releaseNotes += `* Изменён ${change.lang} перевод:\n`;
                  releaseNotes += `* * [${change.modName}](${change.modUrl}) на Minecraft ${Array.from(change.versions).join(', ')};\n`;
                }
              }
            }

            core.setOutput('release_notes', releaseNotes);

      - name: Создание архивов выпусков для каждой из версий игры
        run: |
          for version in 1.7 1.12 1.14 1.15 1.16 1.17 1.18 1.19 1.20 1.21; do
            cd "Набор ресурсов/$version"
            zip -r ../../Rus-For-Mods-$version-${{ steps.get_latest_release.outputs.tag_name }}.zip assets dynamicmcpack.json pack.mcmeta respackopts.json5
            cd ../../
            zip -j -g Rus-For-Mods-$version-${{ steps.get_latest_release.outputs.tag_name }}.zip "Набор ресурсов/pack.png" "Набор ресурсов/peruse_or_bruise.txt"
          done

          # Monifactory
          cd "Сборки/Monifactory/Перевод/"
          mkdir -p resourcepacks
          cp ../../../Rus-For-Mods-1.20-${{ steps.get_latest_release.outputs.tag_name }}.zip resourcepacks/

          # Создание файла options.txt
          echo 'resourcePacks:["Rus-For-Mods-1.20-${{ steps.get_latest_release.outputs.tag_name }}.zip"]' > options.txt
          echo 'lang:ru_ru' >> options.txt

          zip -r ../../../Monifactory-Russian-Translation-${{ steps.get_latest_release.outputs.tag_name }}.zip .
          cd ../../../
      
          # The Ferret Business
          cd "Сборки/The Ferret Business/Перевод/"
          mkdir -p resourcepacks
          cp ../../../Rus-For-Mods-1.7-${{ steps.get_latest_release.outputs.tag_name }}.zip resourcepacks/

          # Создание файла options.txt
          echo 'resourcePacks:["Rus-For-Mods-1.7-${{ steps.get_latest_release.outputs.tag_name }}.zip"]' > options.txt
          echo 'lang:ru_RU' >> options.txt

          zip -r ../../../The-Ferret-Business-Russian-Translation-${{ steps.get_latest_release.outputs.tag_name }}.zip .
          cd ../../../
      
          # GT New Horizons
          cd "Сборки/GT New Horizons/Перевод/"
          mkdir -p resourcepacks
          cp ../../../Rus-For-Mods-1.7-${{ steps.get_latest_release.outputs.tag_name }}.zip resourcepacks/

          # Создание файла options.txt
          echo 'resourcePacks:["Rus-For-Mods-1.7-${{ steps.get_latest_release.outputs.tag_name }}.zip"]' > options.txt
          echo 'lang:ru_RU' >> options.txt

          zip -r ../../../GTNH-Russian-Translation-${{ steps.get_latest_release.outputs.tag_name }}.zip .
          cd ../../../
      
          # All of Fabric 6
          cd "Сборки/All of Fabric 6/Перевод/"
          mkdir -p resourcepacks
          cp ../../../Rus-For-Mods-1.19-${{ steps.get_latest_release.outputs.tag_name }}.zip resourcepacks/

          # Создание файла options.txt
          echo 'resourcePacks:["Rus-For-Mods-1.19-${{ steps.get_latest_release.outputs.tag_name }}.zip"]' > options.txt
          echo 'lang:ru_ru' >> options.txt

          zip -r ../../../All-Of-Fabric-6-Russian-Translation-${{ steps.get_latest_release.outputs.tag_name }}.zip .
          cd ../../../

          # Better MC 4
          cd "Сборки/Better MC 4/Перевод/"
          mkdir -p resourcepacks
          cp ../../../Rus-For-Mods-1.20-${{ steps.get_latest_release.outputs.tag_name }}.zip resourcepacks/

          # Создание файла options.txt
          echo 'resourcePacks:["Rus-For-Mods-1.20-${{ steps.get_latest_release.outputs.tag_name }}.zip"]' > options.txt
          echo 'lang:ru_ru' >> options.txt

          zip -r ../../../BMC-4-Russian-Translation-${{ steps.get_latest_release.outputs.tag_name }}.zip .
          cd ../../../

      - name: Создание тега для выпуска
        id: create_tag
        run: |
          tag_name="${{ steps.get_latest_release.outputs.tag_name }}"
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag $tag_name
          git push origin $tag_name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Создание выпуска
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.generate_release_notes.outputs.release_notes }}
          tag_name: ${{ steps.get_latest_release.outputs.tag_name }}
          name: ${{ steps.get_latest_release.outputs.next_alpha }}-я альфа
          draft: false
          prerelease: true

      - name: Загрузка файлов в выпуск
        run: |
          assets=(
            "Rus-For-Mods-1.7-${{ steps.get_latest_release.outputs.tag_name }}.zip"
            "Rus-For-Mods-1.12-${{ steps.get_latest_release.outputs.tag_name }}.zip"
            "Rus-For-Mods-1.14-${{ steps.get_latest_release.outputs.tag_name }}.zip"
            "Rus-For-Mods-1.15-${{ steps.get_latest_release.outputs.tag_name }}.zip"
            "Rus-For-Mods-1.16-${{ steps.get_latest_release.outputs.tag_name }}.zip"
            "Rus-For-Mods-1.17-${{ steps.get_latest_release.outputs.tag_name }}.zip"
            "Rus-For-Mods-1.18-${{ steps.get_latest_release.outputs.tag_name }}.zip"
            "Rus-For-Mods-1.19-${{ steps.get_latest_release.outputs.tag_name }}.zip"
            "Rus-For-Mods-1.20-${{ steps.get_latest_release.outputs.tag_name }}.zip"
            "Rus-For-Mods-1.21-${{ steps.get_latest_release.outputs.tag_name }}.zip"
            "Monifactory-Russian-Translation-${{ steps.get_latest_release.outputs.tag_name }}.zip"
            "The-Ferret-Business-Russian-Translation-${{ steps.get_latest_release.outputs.tag_name }}.zip"
            "GT New Horizons-Russian-Translation-${{ steps.get_latest_release.outputs.tag_name }}.zip"
            "All-Of-Fabric-6-Russian-Translation-${{ steps.get_latest_release.outputs.tag_name }}.zip"
            "BMC-4-Russian-Translation-${{ steps.get_latest_release.outputs.tag_name }}.zip"
          )

          for asset in "${assets[@]}"; do
            echo "Загрузка $asset..."
            gh release upload ${{ steps.get_latest_release.outputs.tag_name }} "$asset" --repo "${{ github.repository }}"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}